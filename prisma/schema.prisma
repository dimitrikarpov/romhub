generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Rom {
  id          String     @id @default(cuid())
  name        String
  platform    String
  file        String
  images      String?
  description String?
  sha1        String     @unique
  crc32       String
  playlists   Playlist[]
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  roms        Rom[]
  isPublic    Boolean  @default(true)
  userId      String
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model History {
  id          String   @id @default(cuid())
  romId       String
  romName     String
  romPlatform String
  image       String?
  userId      String
  playedAt    DateTime @default(now())
}
